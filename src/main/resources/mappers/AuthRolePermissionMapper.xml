<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.barton.sbc.dao.auth.AuthRolePermissionMapper" >
  <resultMap id="BaseResultMap" type="com.barton.sbc.domain.entity.auth.AuthRolePermission" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="role_id" property="roleId" jdbcType="VARCHAR" />
    <result column="permission_id" property="permissionId" jdbcType="VARCHAR" />
    <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
    <result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, role_id, permission_id, gmt_create, gmt_modified
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from auth_role_permission
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from auth_role_permission
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.barton.sbc.domain.entity.auth.AuthRolePermission" >
    insert into auth_role_permission (id, role_id, permission_id, 
      gmt_create, gmt_modified)
    values (#{id,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR}, #{permissionId,jdbcType=VARCHAR}, 
      #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP})
  </insert>
  <insert id ="batchInsert" parameterType="java.util.List" >
    insert into auth_role_permission
    values
    <foreach collection ="list" item="rolePermission" index= "index" separator =",">
      (
      #{rolePermission.id,jdbcType=VARCHAR}, #{rolePermission.roleId,jdbcType=VARCHAR}, #{rolePermission.permissionId,jdbcType=VARCHAR},
      #{rolePermission.gmtCreate,jdbcType=TIMESTAMP}, #{rolePermission.gmtModified,jdbcType=TIMESTAMP}
      )
    </foreach >
  </insert >
  <insert id="insertSelective" parameterType="com.barton.sbc.domain.entity.auth.AuthRolePermission" >
    insert into auth_role_permission
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="permissionId != null" >
        permission_id,
      </if>
      <if test="gmtCreate != null" >
        gmt_create,
      </if>
      <if test="gmtModified != null" >
        gmt_modified,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="permissionId != null" >
        #{permissionId,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null" >
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null" >
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.barton.sbc.domain.entity.auth.AuthRolePermission" >
    update auth_role_permission
    <set >
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="permissionId != null" >
        permission_id = #{permissionId,jdbcType=VARCHAR},
      </if>
      <if test="gmtCreate != null" >
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null" >
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.barton.sbc.domain.entity.auth.AuthRolePermission" >
    update auth_role_permission
    set role_id = #{roleId,jdbcType=VARCHAR},
      permission_id = #{permissionId,jdbcType=VARCHAR},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <delete id="deleteByPermissionIdAndRoleId" parameterType="java.lang.String" >
    delete from auth_role_permission
    where role_id = #{roleId,jdbcType=VARCHAR} and permission_id = #{permissionId,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteByPermissionId" parameterType="java.lang.String" >
    delete from auth_role_permission
    where permission_id = #{permissionId,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteByRoleId" parameterType="java.lang.String" >
    delete from auth_role_permission
    where role_id = #{roleId,jdbcType=VARCHAR}
  </delete>
</mapper>